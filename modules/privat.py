import requests, json
import urllib.request
import logging
import func, time
import datetime

from urllib import request
from xml.etree import ElementTree as ET

from modules.rulezdev import RulezDevAPI as rulez

class PrivatBankAPI:

    def currency(arguments, message):
        response = {'chat_id': message['chat']['id']}
        response['parse_mode'] = 'markdown'

        now = datetime.datetime.now()

        try:

            # –ù–∞–ª
            req_nal = urllib.request.urlopen("https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5")
            # –ë–µ–∑–Ω–∞–ª
            req_bez = urllib.request.urlopen("https://api.privatbank.ua/p24api/pubinfo?exchange&json&coursid=11")

            # –ü–∞—Ä—Å–∏–º –Ω–∞–ª
            content_nal = req_nal.read().decode('utf8')
            data_nal = json.loads(content_nal)

            for x in range(3):
                ccy = (data_nal[x]['ccy'])

                if ccy == 'USD':
                    # Dollar
                    usdbuy = round(float(data_nal[x]['buy']), 2)
                    usdsale = round(float(data_nal[x]['sale']), 2)
                    print('Yes, USD')

                elif ccy == 'EUR':
                    # Euro
                    eurbuy = round(float(data_nal[x]['buy']), 2)
                    eursale = round(float(data_nal[x]['sale']), 2)
                    print('Yes, EUR')

                elif ccy == 'RUR':
                    # Rubl
                    rubbuy = round(float(data_nal[x]['buy']), 2)
                    rubsale = round(float(data_nal[x]['sale']), 2)
                    print('Yes, RUR')

#                elif ccy == 'BTC':
#                    # BitCoin
#                    btcbuy = round(float(data_nal[x]['buy']), 2)
#                    btcsale = round(float(data_nal[x]['sale']), 2)
#                    print('Yes, BTC')

                else:
                    print('Not found')


            #print(reqnal.headers['content-type']) <- –¥–ª—è –¥–µ–±–∞–≥–∞, —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
            str_a = ("*$* –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ ```%s```, –∞ –ø—Ä–æ–¥–∞–µ—Ç –ø–æ `%s`" % (usdbuy, usdsale))
            str_b = ("*‚Ç¨* –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ ```%s```, –∞ –ø—Ä–æ–¥–∞–µ—Ç –ø–æ `%s`" % (eurbuy, eursale))
            str_c = ("*‚ÇΩ* –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ ```%s```, –∞ –ø—Ä–æ–¥–∞–µ—Ç –ø–æ `%s`" % (rubbuy, rubsale))
#            str_d = ("*…É* –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ ```$%s```, –∞ –ø—Ä–æ–¥–∞–µ—Ç –ø–æ `$%s`" % (btcbuy, btcsale))

            today = now.strftime("%Y-%m-%d %H:%M")
            result = ["\r–ó–Ω–∞—á–∏—Ç —Ç–∞–∫, _–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫_ —Å–µ–≥–æ–¥–Ω—è (%s), *–Ω–∞–ª–∏—á–Ω—ã–π –∫—É—Ä—Å*:" % today] 

            result.append(str_a)
            result.append(str_b)
            result.append(str_c)
#            result.append(str_d)
            #response['text'] = "\n\t".join(result)


            # –ü–∞—Ä—Å–∏–º –±–µ–∑–Ω–∞–ª
            content_bez = req_bez.read().decode('utf8')
            data_bez = json.loads(content_bez)

            for x in range(3):
                ccy = (data_bez[x]['ccy'])

                if ccy == 'USD':
                    # Dollar
                    usdbuy = round(float(data_bez[x]['buy']), 2)
                    usdsale = round(float(data_bez[x]['sale']), 2)
                    print('Yes, USD')

                elif ccy == 'EUR':
                    # Euro
                    eurbuy = round(float(data_bez[x]['buy']), 2)
                    eursale = round(float(data_bez[x]['sale']), 2)
                    print('Yes, EUR')

                elif ccy == 'RUR':
                    # Rubl
                    rubbuy = round(float(data_bez[x]['buy']), 2)
                    rubsale = round(float(data_bez[x]['sale']), 2)
                    print('Yes, RUR')

#                elif ccy == 'BTC':
#                    # BitCoin
#                    btcbuy = round(float(data_bez[x]['buy']), 2)
#                    btcsale = round(float(data_bez[x]['sale']), 2)
#                    print('Yes, BTC')

                else:
                    print('Not found')


            str_a = ("*$* –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ ```%s```, –∞ –ø—Ä–æ–¥–∞–µ—Ç –ø–æ `%s`" % (usdbuy, usdsale))
            str_b = ("*‚Ç¨* –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ ```%s```, –∞ –ø—Ä–æ–¥–∞–µ—Ç –ø–æ `%s`" % (eurbuy, eursale))
            str_c = ("*‚ÇΩ* –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ ```%s```, –∞ –ø—Ä–æ–¥–∞–µ—Ç –ø–æ `%s`" % (rubbuy, rubsale))
#            str_d = ("*…É* –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ ```$%s```, –∞ –ø—Ä–æ–¥–∞–µ—Ç –ø–æ `$%s`" % (btcbuy, btcsale))

            result.append("\n*–±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π –∫—É—Ä—Å*:")

            result.append(str_a)
            result.append(str_b)
            result.append(str_c)
#            result.append(str_d)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –æ—Ç –ö–∞—Ä–ª–∞
            market = rulez.currency()
            #result.append("\n–∞ –≤–æ—Ç –Ω–∞ [—á–µ—Ä–Ω–æ–º —Ä—ã–Ω–∫–µ](http://minfin.com.ua/currency/auction/usd/buy/dnepropetrovsk/?presort=&sort=time&order=desc) %s" % market)
            result.append("\n–∞ –≤–æ—Ç –Ω–∞ *—á–µ—Ä–Ω–æ–º —Ä—ã–Ω–∫–µ* %s" % market)
            response['reply_markup'] = json.dumps({'inline_keyboard': [[{'text': 'üíµ –ú–∏–Ω—Ñ–∏–Ω üí∂', 'url': 'http://minfin.com.ua/currency/auction/usd/buy/dnepropetrovsk/?presort=&sort=time&order=desc'}]]})
            response['text'] = "\n\t".join(result)


        except Exception as e:
            logging.warning("Error:" + str(e))
            response['text'] = "–ù–µ—à–º–æ–≥–ª–∞ :("

        func.send_action(response, "typing")
        time.sleep(1)
        return response

    def avias_prices(arguments, message):
        response = {'chat_id': message['chat']['id']}

        try:

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –æ—Ç –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫–∞ –ø–æ –ê–≤–∏–∞—Å—É –≤ –î–Ω–µ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–µ
            xmlget = requests.get("https://privat24.privatbank.ua/p24/accountorder?oper=prp&avias=price&region=04&type=&PUREXML=")

            # –ü–∞—Ä—Å–∏–º XML
            root = ET.fromstring(xmlget.content)

            # –¢–µ—Å—Ç—ã: –ø–∞—Ä—Å–∏–º —Ñ–∞–π–ª
            #tree = ET.parse('price.xml')
            #root = tree.getroot()

            # –î–∞—Ç–∞ "—Å–µ–≥–æ–¥–Ω—è" –∏–∑ –æ—Ç–≤–µ—Ç–∞ api
            for date in root.iter('date'):
                day = date.attrib
                today = day['traditional']
                print("–°–µ–≥–æ–¥–Ω—è, %s:" % (today))
                result = ["\r–°–µ–≥–æ–¥–Ω—è, %s:" % (today)]

            # –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã
            for cost in root.iter('price'):
                avias = cost.attrib
                fuel = avias['type']
                price = avias['price']
                string = ("%s —Å—Ç–æ–∏—Ç %s" % (fuel, price))
                print(string)
                result.append(string)
                response['text'] = "\n\t".join(result)

        except Exception as e:
            logging.warning("Error:" + str(e))
            response['text'] = "–ù–µ—à–º–æ–≥–ª–∞ :("

        func.send_action(response, "typing")
        time.sleep(1)
        return response
